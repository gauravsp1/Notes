Coding


for(var i=0;i<10;i++){
    setTimeout(()=>{
        console.log(i)
    },1000)
}-----will print 10 10times

if we use let then it will print normally..but Y?

In the first example, using var, the variable declared in the loop redeclares the variable outside the loop.

In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop.

When let is used to declare the i variable in a loop, the i variable will only be visible within the loop.
This happens because of block level scope.

for(let i=0;i<10;i++){
    setTimeout(()=>{
        console.log(i)
    },1000)
}-----will print 1 to 10

for(var i=0;i<10;i++){
function close(x){

    setTimeout(()=>{
        console.log(x)
    },1000)
}
close(i)
}-----will print 1 to 10

var numArray = [1,2, 3, 4, 5, 6, 7, 8, 9, 10]
 numArray.length=0

console.log(numArray)



Sort array- high to low,low to high *******

array.sort(sortingFunction);

Here, array is the array to be sorted, and sortingFunction is an optional function that determines the order in which the elements of the array are sorted.
If the sortingFunction is not provided, the array will be sorted in alphabetical order by default.
The sortingFunction takes two arguments and returns a value based on the comparison of the two values. 
If the return value is negative, the first value is sorted before the second value. 
If the return value is positive, the second value is sorted before the first value. 
If the return value is zero, no sorting is performed for the two values.

var numArray = [140000, 104, 99];
numArray.sort(function(a, b) {
  return a - b;    //low to high
});

array to String *******
array.toString()

sort array on frequency of appearance *******


Remove duplicate from array *******

const array = [1, 2, 2, 3, 3, 4, 5, 5];
const uniqueArray = [...new Set(array)];
console.log(uniqueArray); // Output: [1, 2, 3, 4, 5]

uniqueArray = array.filter(function(item, index,self) {
    return self.indexOf(item) === index;
})

const array = [1, 2, 2, 3, 3, 4, 5, 5];
const uniqueArray = array.reduce((accumulator, currentValue) => {
  if (!accumulator.includes(currentValue)) {
    accumulator.push(currentValue);
  }
  return accumulator;
}, []);
console.log(uniqueArray); // Output: [1, 2, 3, 4, 5]

const uniqueArray2 = array.reduce((acc, it) => acc.includes(it) ? acc : [ ...acc, it ], [])


Firt sort the array
nums = [0,0,1,1,1,2,2,3,3,4]

nums.filter((value,index)=>{
    return nums[index] !=nums[index+1]
})

const nums = [1, 1, 2, 2, 3, 3];

const noDups = [...new Set(nums)];

console.log(noDups); // [1,2,3]




How to find prime no in array ********
var numArray = [1,2, 3, 4, 5, 6, 7, 8, 9, 10]

numArray = numArray.filter((item,index)=>{
    if(item%2===0) {
        return true
    }
    else {
        return false
    }
})

console.log(numArray);




capitalize the last letter of each word in a string *********
var input = "Party like its 2015";

input = input.split(" ").map((item)=>item.slice(0,-1) + item.slice(-1).toUpperCase()).join(" ")
console.log(input)

//string.substr(start, length)
//string.substring(start, end)


function fizzbuzz(){
    
    for(var next=1;next<101;next++){
        if(next%15===0){
             console.log("FizzBuzz");
        } 
       else if(next%3===0){
            console.log("Fizz");
        } 
        else if(next%5===0){
             console.log("Buzz");
        } 
        else{  
    console.log(next);
        }
    }
   
}
fizzbuzz()

let a =3;
let b=5;
for (var i = 1; i < 16; i++) {
  a--;
  b--;
  if (a === 0 && b === 0) {
    console.log("Fizz Buzz");
    a=3;b=5;
  } else if (a === 0) {
    console.log("Fizz");
    a=3
  } else if (b === 0) {
    console.log("Buzz");
    b=5;
  } else {
    console.log(i);
  }
}





Fibonachi series **********

const fib =(N)=> {
    let memo = []
    memo[0] = 0
    memo[1] = 1
    for(let i = 2; i < N; i++){
        memo[i] = memo[i - 1] + memo[i - 2]
    }
    return memo
};

console.log(fib(4));

const fib=(length)=>{
        let memo=[]
        memo[0]=0
        memo[1]=1
        Array.from({length:length}).forEach((item,index)=>{
            if(index<length-2){

                memo[index+2]=memo[index+1]+memo[index]
            }
        })
        return memo
}


Reverse string **********
var sentence="Hello Gaurav"
var revsentence =sentence.split('').reverse().join('')
console.log(revsentence)


const str = 'hello world';
const reversedStr = str.split('').reduce((accumulator, currentValue) => {
  return currentValue + accumulator;
}, '');
console.log(reversedStr); // Output: dlrow olleh


12 hr clock to 24 hrs **************

var time="12:50AM"

var length1=time.length;

if(time[length1-2]+time[length1-1]==="AM" && time[0]+time[1]==="12"){
    console.log("00"+time.substr(2,3))
}

else if(time[length1-2]+time[length1-1]==="AM"  ){
    console.log(time.substr(0,5))
}
else if(time[length1-2]+time[length1-1]==="PM" && time[0]+time[1]==="12"){
    console.log(time.substr(0,5))
}

else {
    var hour=parseInt(time.substr(0,2))+12
    var min= time.substr(3,2)
    console.log(hour)
    console.log(min)
     console.log(hour+":"+min)
} 






Destructuring **********
var gaurav={first:{city:100,city2:20},to:30};
let {first:{city},to:me}=gaurav
console.log(city)
console.log(me)


Swap 2 numbers **********
let a = 1;
let b = 2;
[a, b] = [b, a];






n children in circle who gets the last toy *******
function getLast(kids, toys, start){
    let last = ( toys +start-1 )%kids
    return last || kids
}
console.log(getLast(3,5,1))






swap any two nos without using third variable *****
let a = 5 , b= 10;
a= a+b;
b= a-b;
a=a-b;
console.log("value of a is " + a + "value of b is " + b);



Missing number from the sum ********

var array=[1,2,3,4,6,7,8,9,10,11]

 errorSum =array.reduce((total,item)=>{
  return total+item
})
var n=array.length+1
var sum=(n*(n+1))/2

console.log(sum-errorSum)


Reverse **********

var string="My Name Gaurav"


var d=string.toLowerCase().split(" ")
var rr=[]
for(var i=0;i<d.length;i++){
    var tt=d[i].split("").reverse().join("")
    rr.push(tt)
    
}
var er=rr.join(" ")
console.log(er)

//result=> ym eman varuag


************ RajaSoftware  *******

Input: 6, 00 Output: 180
Input 5, 30 Output 15


function angle(min, hr){
		
	if (Math.abs(min*5.5-hr*30)<=180){
	return Math.abs(min*5.5-hr*30)
	}
	else{
	return  360-Math.abs(min*5.5-hr*30)
	}
	
}

Sum of digits ********

var x=55
 var new =x.toString()
output as 10
------------------------------------------
var x=55
 var newx =x.toString()
var sumt=0
function sum(newx){
    
	for(i=0;i<newx.length;i++){
	sumt= sumt +parseFloat(newx[i])
	}
	return sumt
		
}

sum(newx)
----------------------------------------

var value = 2568,
    sum = 0;

while (value>0) {
    sum = sum+ (value % 10);
    value = Math.floor(value / 10);
}

console.log(sum);

----------------------------------------------------
function sumDigits(number) {
  if (number === 0) {
    return 0;
  } else {
    return number % 10 + sumDigits(Math.floor(number / 10));
  }
}

console.log(sumDigits(2345)); // Output: 14

*******************************************

Number closest to zero positive and negative  ************

function computeClosestToZero(ts){
    if(ts.length===0){
        return 0
    }
else{

    var positiveArr = [];
    var negativeArr = [];
    t.forEach(function(item){
    if(item<0){
    negativeArr.push(item);
    }
    else{
    positiveArr.push(item);
    }})
var positive =positiveArr.sort()
var negative =negativeArr.sort()

if(positive[0]-Math.abs(negative[0])<=0){
    var gauz=positive[0]
}
else{
var gauz=negative[0]
}

return gauz
}}

var t = [1,2,3,-5,-8,-4]

computeClosestToZero(t)

************************************


Delete from Object ******

const obj={a:1,b:3}
delete obj.a
console.log(obj)


Pair of array [[1, 7],[2, 6],[3, 5],[4, 4]]
var array=[1,2,3,4,5,6,7]
var finalarray=[]
for(i=0;i<array.length/2;i++){
    var len=array.length
    var newarray=[array[i],array[len-1-i]]
    finalarray.push(newarray)
}

console.log(finalarray)



var a=10
var b=100

[a,b]=[b,a]


**********************
Input:

arr = [1, 8, 101, 7, 56, 90]
Output:
90
Explanation:
The largest element of given array is 90.

arr = [1, 8, 101, 7, 56, 90]
let maxi = arr[0];
 
    for(i = 1; i <arr.length; i++)
    {
        maxi = arr[i] > maxi ? arr[i] : maxi;
    }
    
    console.log(maxi)

Math.max(arr)

Second Max
arr = [1, 180, 10, 7, 56, 90,140,200]

function largest(arr){
    let max=0
    let secondMax=0
    arr.forEach((value)=>{
        secondMax=max>value?secondMax<value?value:secondMax :max
         max=max<value?value:max
          })
    console.log("secondMax",secondMax)
    console.log("max",max)
}

largest(arr)
**********************************


var cnt = 0;

var fnFalse = function () {
	 ++cnt;
   return false;
};

var fnTrue = function () {
	 ++cnt;
   return true;
}

cnt = 0;
var output1 = fnFalse() || fnTrue();
console.log( "1st log :: cnt = " + cnt );    // 2
console.log( "2nd log :: output1 = " + output1 );  // true



cnt = 0;
var output2 = fnTrue() || fnFalse();
console.log( "3rd log :: cnt = " + cnt ); // 1
console.log( "4th log :: output2 = " + output2 ); // true




/*


     1. Given an Array of numbers only, use the array sort API to sort it such that : 
     a. The even numbers come to the left of array.
     b. The odd numbers come to the right of array.
     c. The groups of even & odd numbers is sorted in increasing order in itself.
     E.g.: 
     Input : [99,88,77,66,55,44,33,22,11,94,87,2,9,13]
     Output: [2,22,44,66,88,94,9,11,13,33,55,77,87,99]

Hint: Refer Array.sort
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort

*/



ar = [99,88,77,66,55,44,33,22,11,94,87,2,9,13];
ar.sort(function ( a, b ) {
   //Write you code here.
    
	n=[99,88,77,66,55,44,33,22,11,94,87,2,9,13];
n.sort(function(a, b) {
    return a % 2 - b % 2 || a - b;
});

console.log(n);

	
    
});
alert( ar.join() );


new Counter().add(1).add(2).add(3).get() == 6 
new Counter().add(1).add(10).reset().add(5).get() == 5 

function Counter() {
    this.count = 0,
        this.add = function (value) {
            this.count = this.count + value;
            return this
        },
        this.get = function () {
            return this.count
        },
        this.reset = function () {
            this.count = 0;
            return this
        }
}

console.log(new Counter().add(1).add(2).add(3).get())
console.log("second",new Counter().add(1).add(10).reset().add(5).get())

function Counter() {
    var count = 0;
        this.add = function (value) {
            count = count + value;
            return this
        };
        this.get = function () {
            return count
        };
        this.reset = function () {
            count = 0;
            return this
        }
}


	
const arr=[null, 2,5,'',"ello",4,undefined,8,null];

console.log("Find",arr.find(i=>i));  //Find 2
console.log("Filter",arr.filter(i=>i));  // Filter (5) [2, 5, "ello", 4, 8]
console.log("Reduce",arr.reduce(i=>i));  // Reduce null
console.log("Map",arr.map(i=>i));  //  Map (9) [null, 2, 5, "", "ello", 4, undefined, 8, null]
If we write condition in map it returns true or false according to the condition
arr=[1,2,3,4,6]
console.log("Mapss",arr.map(i=>i>3));  // [false, false, false, true, true]

    

this.setState({​​​​​count:1}​​​​​);
console.log("Value of count :",this.state.count);


    
let a={​​​​​a:1}​​​​​;
let b={​​​​​a:1}​​​​​;
let c=a;
a===c; // true 
a===b; // false



Tricky ********

To check palindrom
str == str.split('').reverse().join('')
console.log(false == '0') // true
console.log(false === '0') //false 

var hero = {
    _name: 'John Doe',
    getSecretIdentity: function (){
        return this._name;
    }
};

var stoleSecretIdentity = hero.getSecretIdentity;

console.log(stoleSecretIdentity()); //undefined
console.log(hero.getSecretIdentity()); //John Doe

console.log(typeof typeof 1); // string
typeof 1 will return "number" and typeof "number" will return string.


var b = 1;
function outer(){
   	var b = 2
    function inner(){
        b++;
        var b = 3;
        console.log(b)
    }
    inner();
}
outer();

Output to the console will be “3”.

There are three closures in the example, each with it’s own var b declaration. When a variable is invoked closures will be checked in order 
from local to global until an instance is found. Since the inner closure has a b variable of its own, that is what will be output.

Furthermore, due to hoisting the code in inner will be interpreted as follows:

function inner () {
    var b; // b is undefined
    b++; // b is NaN
    b = 3; // b is 3
    console.log(b); // output "3"
}





var a = 1
function foo(){
 var a = 2
 console.log("i",a) // i,2
}
foo()
console.log("o",a); //o,1





function foo(){
    a = 2
  }
  foo()
  console.log(a); //2





let arr =[1,2]
function test(array){
    
  array.push(3)
}
test([...arr])
console.log(arr) //  arr=[1,2]





let arr =[1,2]
function test(array){
  array = [1,2,3]
}
test(arr)
console.log(arr)

The answer is [1,2]. I know that after all the explanations on references, it seems weird. 
Still, there is a good reason for it, The = Operator creates a new reference (you can look in this discussion for more information), 
The array exist in the local scope and don't influence the global variables in this case.





const carDetails = {
    name: "Tomer",
    getName(){
       return this.name;
    },
  };
  var name = "Joe";
  var getCarName = carDetails.getName;
  console.log(getCarName());  // Joe

Comparing two arrays
var first = [ 1, 2, [3, 4, 5] ];
var second = [ 1, 2, [3, 4, 5] ];
 
var isEqual = JSON.stringify(first) === JSON.stringify(second);
console.log(isEqual);
 
/*
    Output: true
*/



console.log(1+ +"2"+"5") // "35"



/**
 * Create a Javascript class based calculator which can
 * perform below operations
 *
 * All operations output should be printed on console
 */

const c = new Calculator();

c.add(5);

c.reset(); // resets value to 0;

c.subtract(5);

c.reset();

c.add(10).subtract(5).divide(2);

c.reset();

c.add(10).subtract(5).divide(2);

c.reset();

c.add(10).subtract(5).divide(2).multiply(5);

c.reset();

Calculator.factorial(5); // Class function





// const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// for (let i = 0; i < 10; i++) {
//   setTimeout(() => console.log(a[i]), 1000);
// // console.log(a[i])
// }

// i=0
// i=1


// const clothes = ['jacket', 't-shirt'];
// clothes.length = 0;
// console.log(clothes[0])

// b=10
// function display() {
//     var b=10
//     var a;
// 
// // var a=b

//     }
//     display();
//     console.log('b', typeof b === 'undefined'); false
//     console.log('a', typeof a === 'undefined'); true

// const sum =(a)=>(b)=>(c)=> console.log(a+b+c);


// sum (1)(2)(3)



let array=[1, 2, 3, 4, ,5, 6, 7, 8, 9, 10]
// {even: [2, 4, 6, 8], odd: [1, 3, 5, 7, 9]}

// let result=array.sort((a,b)=>a%2-b%2)

// console.log("Result",result);

let result=array.reduce((acc,item)=>{
        // acc["even"]=[]
        // acc["odd"]=[]

        if(item %2===0){
             acc.even.push(item)   
        } else{
            acc.odd.push(item)
        }
        return acc
},{
    even:[],
    odd:[]
})

console.log("Result",result);



// Sentence case 
// Write a method which take one parameter that is string containing sentence and return a string with first letter of word is capital and rest is in lower case ?
// const name = 'deepaK khanDelwal PqR;
// Expected result -> Deepak Khandelwal Pqr


// function CapitalFistLetter(value){
    
//    const result= value.toLowerCase().split(" ").map((item)=>{
//                     return  newsentence= newsentence.charAt(0).toUpperCase() +newsentence.slice(1)
//         }).join(" ")

//         console.log(result);
   
// }

// const namesentence = "deepaK khanDelwal PqR GauRaV"

// CapitalFistLetter(namesentence)

// // splice
// // CharAt 



const num1 = 10;



const res = num1.add(20, 30, 40).subtract(20);
console.log(res);


const array = [ 'fatfish', 'medium', 'blog', 'fat', 'fish' ]

console.log(array.at(-1)) // fish


Instead of 
const len = array.length

console.log(array[ len - 1 ]) // fish






















